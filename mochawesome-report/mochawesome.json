{
  "stats": {
    "suites": 3,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-29T22:02:26.131Z",
    "end": "2024-02-29T22:02:35.368Z",
    "duration": 9237,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a51729ce-2623-40fe-8a1d-b86e38040ace",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "655f3698-6bcf-4ef3-99a6-30afef214d36",
          "title": "Database Connection and Refresh",
          "fullFile": "D:\\Capstone Projects\\4th Module - Backend\\Subscribers-Mongo-Node-BoilerPlate-main\\tests\\index.test.js",
          "file": "\\tests\\index.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Database Connection and Refresh\"",
              "fullTitle": "Database Connection and Refresh \"before all\" hook in \"Database Connection and Refresh\"",
              "timedOut": false,
              "duration": 5816,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Connect to the test database\nawait mongoose.connect(process.env.DATABASE_URL, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});",
              "err": {},
              "uuid": "04d22733-5a9b-4779-a422-46b74d671a18",
              "parentUUID": "655f3698-6bcf-4ef3-99a6-30afef214d36",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Database Connection and Refresh\"",
              "fullTitle": "Database Connection and Refresh \"before each\" hook in \"Database Connection and Refresh\"",
              "timedOut": false,
              "duration": 412,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Before each test, refresh the database with sample data\nawait connectToDatabase();",
              "err": {},
              "uuid": "0fca0cb7-57aa-4737-a9ec-dfd1d3010144",
              "parentUUID": "655f3698-6bcf-4ef3-99a6-30afef214d36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Database Connection and Refresh\"",
              "fullTitle": "Database Connection and Refresh \"after all\" hook in \"Database Connection and Refresh\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Disconnect from the test database after all tests are done\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "2c1af82a-1e27-45f7-a056-ede1f27b2855",
              "parentUUID": "655f3698-6bcf-4ef3-99a6-30afef214d36",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Database Connection and Refresh\"",
              "fullTitle": "Database Connection and Refresh \"after each\" hook in \"Database Connection and Refresh\"",
              "timedOut": false,
              "duration": 198,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// After each test, delete all documents from the subscribers collection\nawait subscriberModel.deleteMany({});",
              "err": {},
              "uuid": "3f3ae489-e614-4281-8a50-97e96c60c4a9",
              "parentUUID": "655f3698-6bcf-4ef3-99a6-30afef214d36",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should connect to the test database and refresh data",
              "fullTitle": "Database Connection and Refresh should connect to the test database and refresh data",
              "timedOut": false,
              "duration": 621,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test if connectToDatabase function connects successfully and refreshes data\ntry {\n  await connectToDatabase();\n  const subscribersCount = await subscriberModel.countDocuments();\n  expect(subscribersCount).to.equal(data.length);\n} catch (error) {\n  throw error;\n}",
              "err": {},
              "uuid": "f469e49d-93cd-447a-9a77-35525eeead77",
              "parentUUID": "655f3698-6bcf-4ef3-99a6-30afef214d36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new subscriber",
              "fullTitle": "Database Connection and Refresh should create a new subscriber",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const subscriberData = {\n  name: \"John Doe\",\n  subscribedChannel: \"Sample Channel\",\n};\nconst newSubscriber = new subscriberModel(subscriberData);\nconst savedSubscriber = await newSubscriber.save();\n// Check if the savedSubscriber has the expected properties\nexpect(savedSubscriber).to.have.property(\"name\").to.equal(\"John Doe\");\nexpect(savedSubscriber)\n  .to.have.property(\"subscribedChannel\")\n  .to.equal(\"Sample Channel\");\nexpect(savedSubscriber)\n  .to.have.property(\"subscribedDate\")\n  .to.be.a(\"Date\");",
              "err": {},
              "uuid": "494636fd-aea0-4cb3-bc7a-34f5bda8ddcc",
              "parentUUID": "655f3698-6bcf-4ef3-99a6-30afef214d36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not save a subscriber without required fields",
              "fullTitle": "Database Connection and Refresh should not save a subscriber without required fields",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidSubscriber = new subscriberModel({});\nawait expect(invalidSubscriber.save()).to.be.rejectedWith(mongoose.Error.ValidationError);",
              "err": {},
              "uuid": "90a14017-c9bc-46b4-9ae3-8c8d2496992a",
              "parentUUID": "655f3698-6bcf-4ef3-99a6-30afef214d36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f469e49d-93cd-447a-9a77-35525eeead77",
            "494636fd-aea0-4cb3-bc7a-34f5bda8ddcc",
            "90a14017-c9bc-46b4-9ae3-8c8d2496992a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 839,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "34bcdcc8-16ee-469e-9c2b-4f8cf47fc2c0",
          "title": "Your Express App",
          "fullFile": "D:\\Capstone Projects\\4th Module - Backend\\Subscribers-Mongo-Node-BoilerPlate-main\\tests\\index.test.js",
          "file": "\\tests\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should respond with a status code of 200 for the root path",
              "fullTitle": "Your Express App should respond with a status code of 200 for the root path",
              "timedOut": false,
              "duration": 537,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get(\"/\")\n  .end((err, res) => {\n    if (err) {\n      console.error(err);\n      return done(err);\n    }\n    expect(res).to.have.status(200);\n    expect(res.text).to.equal(\"Success\");\n    done();\n  });",
              "err": {},
              "uuid": "4c05d3dd-0962-4176-bc61-69997c259c6d",
              "parentUUID": "34bcdcc8-16ee-469e-9c2b-4f8cf47fc2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a status code of 400 for unknown paths",
              "fullTitle": "Your Express App should respond with a status code of 400 for unknown paths",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get(\"/unknown\")\n  .end((err, res) => {\n    if (err) {\n      console.error(err);\n      return done(err);\n    }\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "a60104b6-bfbd-476d-8928-eca95aba06e5",
              "parentUUID": "34bcdcc8-16ee-469e-9c2b-4f8cf47fc2c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c05d3dd-0962-4176-bc61-69997c259c6d",
            "a60104b6-bfbd-476d-8928-eca95aba06e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 544,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "83600a77-fb51-45df-9119-e1c9c96aff9a",
          "title": "SubscriberRoute",
          "fullFile": "D:\\Capstone Projects\\4th Module - Backend\\Subscribers-Mongo-Node-BoilerPlate-main\\tests\\index.test.js",
          "file": "\\tests\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should handle incorrect subscriber ID",
              "fullTitle": "SubscriberRoute should handle incorrect subscriber ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const incorrectId = \"255\";\nconst res = await chai.request(app).get(`/subscribers/${incorrectId}`);\nexpect(res).to.have.status(400);",
              "err": {},
              "uuid": "f43cc853-799f-45b3-93a4-d1844e3650e9",
              "parentUUID": "83600a77-fb51-45df-9119-e1c9c96aff9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f43cc853-799f-45b3-93a4-d1844e3650e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}